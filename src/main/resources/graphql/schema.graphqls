type Query {
    employees: [Employee]
    products(name: String): [Product]
    categories(name: String): [Category]
    signin(auth: AuthInput): Auth
    myAccount: MyAccount
}
type Mutation {
    updateSalary(input: UpdateSalaryInput!): UpdateSalaryPayload
    signup(register: RegisterInput): Auth
    saveProduct(product: ProductInput): Product
    createCategory(category: CategoryInput): Category
}

input AuthInput {
    email: String!
    password: String!
}

input RegisterInput {
    firstName: String!
    lastName: String!
    email: String!
    password: String!
}

type Auth {
    username: String!
    authenticated: Boolean!
    created: String!
    expiration: String!
    accessToken: String!
    refreshToken: String!
}

type MyAccount {
    firstName: String
    lastName: String
    email: String!
    roles: [String]
}

type Product {
    id: ID!
    name: String!
    description: String!
    cover: String
    images: [String]
    code: String
    sku: String
    price: Float!
    priceSale: Float
    tags: [String]
    inStock: Boolean
    taxes: Boolean
    category: String!
    createdAt: String
}

input ProductInput {
    id: ID
    name: String!
    description: String!
    images: [String],
    code: String
    sku: String
    price: Float!
    priceSale: Float
    tags: [String]
    inStock: Boolean
    taxes: Boolean
    category: String!
}

type Category {
    id: ID!
    name: String!
    description: String
    classify: [String]!
}

input CategoryInput {
    name: String!
    description: String
    classify: [String]!
}

type Employee {
    id: ID!
    name: String
    salary: String
}

input UpdateSalaryInput {
    employeeId: ID!
    salary: String!
}
type UpdateSalaryPayload {
    success: Boolean!
    employee: Employee
}
